print(paste0("Test Accuracy:", sum(diag(acc))/sum(acc)))
rf.bank = randomForest(pep ~. ,data = bank, subset = train, mtry = 2, importance = TRUE)
predict.bankTest = predict(rf.bank, newdata = bank.test)
acc = table(predict.bankTest, bank.test$pep)
print(paste0("Test Accuracy:", sum(diag(acc))/sum(acc)))
rf.bank = randomForest(pep ~. ,data = bank, subset = train, mtry = 3, importance = TRUE)
predict.bankTest = predict(rf.bank, newdata = bank.test)
acc = table(predict.bankTest, bank.test$pep)
print(paste0("Test Accuracy:", sum(diag(acc))/sum(acc)))
rf.bank = randomForest(pep ~. ,data = bank, subset = train, mtry = 4, importance = TRUE)
predict.bankTest = predict(rf.bank, newdata = bank.test)
acc = table(predict.bankTest, bank.test$pep)
print(paste0("Test Accuracy:", sum(diag(acc))/sum(acc)))
rf.bank = randomForest(pep ~. ,data = bank, subset = train, mtry = 5, importance = TRUE)
predict.bankTest = predict(rf.bank, newdata = bank.test)
acc = table(predict.bankTest, bank.test$pep)
print(paste0("Test Accuracy:", sum(diag(acc))/sum(acc)))
rf.bank = randomForest(pep ~. ,data = bank, subset = train, mtry = 6, importance = TRUE)
predict.bankTest = predict(rf.bank, newdata = bank.test)
acc = table(predict.bankTest, bank.test$pep)
print(paste0("Test Accuracy:", sum(diag(acc))/sum(acc)))
rf.bank = randomForest(pep ~. ,data = bank, subset = train, mtry = 7, importance = TRUE)
predict.bankTest = predict(rf.bank, newdata = bank.test)
acc = table(predict.bankTest, bank.test$pep)
print(paste0("Test Accuracy:", sum(diag(acc))/sum(acc)))
?rfcv
rf.cv = rfcv(bank.train, bank.train$pep, cv.fold = 5, mtry = 5)
rf.cv = rfcv(bank.train, bank.train$pep, cv.fold = 5, mtry = function(p) return(5))
rf.cv = rfcv(bank.train, bank.train$pep, cv.fold = 5, mtry = function(p) max(1,p))
rf.cv$error.cv
rf.cv$n.var
predict.bankTest = predict(rf.cv, newdata = bank.test)
acc = table(rf.cv$predicted, bank.train$pep)
rf.cv$predicted
bank.train$pep
acc = table(rf.cv$predicted, bank.train$pep)
tree.bankTrain = rpart(pep~., data = bank.train, method = "class",
control = rpart.control(xval = 10,cp = 0.004))
summary(tree.bankTrain)
rpart.plot(tree.bankTrain)
printcp(tree.bankTrain)
tree.bankTrain = rpart(pep~., data = bank.train, method = "class",
control = rpart.control(xval = 10))
summary(tree.bankTrain)
rpart.plot(tree.bankTrain)
printcp(tree.bankTrain)
tree.bankTrain = rpart(pep~., data = bank.train, method = "class",
control = rpart.control(xval = 10))
summary(tree.bankTrain)
rpart.plot(tree.bankTrain)
printcp(tree.bankTrain)
predict.bankTest = predict(tree.bankTrain, bank.test, type="class")
acc = table(predict.bankTest, bank.test$pep)
print(paste0("Test Accuracy:", sum(diag(acc))/sum(acc)))
tree.bankTrain = rpart(pep~., data = bank.train, method = "class",
control = rpart.control(min.split = 5, xval = 10))
summary(tree.bankTrain)
rpart.plot(tree.bankTrain)
printcp(tree.bankTrain)
predict.bankTest = predict(tree.bankTrain, bank.test, type="class")
acc = table(predict.bankTest, bank.test$pep)
print(paste0("Test Accuracy:", sum(diag(acc))/sum(acc)))
tree.bankTrain = rpart(pep~., data = bank.train, method = "class",
control = rpart.control(min.split = 10, xval = 10))
summary(tree.bankTrain)
rpart.plot(tree.bankTrain)
printcp(tree.bankTrain)
predict.bankTest = predict(tree.bankTrain, bank.test, type="class")
acc = table(predict.bankTest, bank.test$pep)
print(paste0("Test Accuracy:", sum(diag(acc))/sum(acc)))
tree.bankTrain = rpart(pep~., data = bank.train, method = "class",
control = rpart.control(min.split = 30, xval = 10))
summary(tree.bankTrain)
rpart.plot(tree.bankTrain)
printcp(tree.bankTrain)
predict.bankTest = predict(tree.bankTrain, bank.test, type="class")
acc = table(predict.bankTest, bank.test$pep)
print(paste0("Test Accuracy:", sum(diag(acc))/sum(acc)))
tree.bankTrain = rpart(pep~., data = bank.train, method = "class",
control = rpart.control(min.split = 80, xval = 10))
summary(tree.bankTrain)
rpart.plot(tree.bankTrain)
printcp(tree.bankTrain)
predict.bankTest = predict(tree.bankTrain, bank.test, type="class")
acc = table(predict.bankTest, bank.test$pep)
print(paste0("Test Accuracy:", sum(diag(acc))/sum(acc)))
tree.bankTrain = rpart(pep~., data = bank.train, method = "class",
control = rpart.control(min.split = 100, xval = 10))
summary(tree.bankTrain)
rpart.plot(tree.bankTrain)
printcp(tree.bankTrain)
predict.bankTest = predict(tree.bankTrain, bank.test, type="class")
acc = table(predict.bankTest, bank.test$pep)
print(paste0("Test Accuracy:", sum(diag(acc))/sum(acc)))
tree.bankTrain = rpart(pep~., data = bank.train, method = "class",
control = rpart.control(min.split = 1, xval = 10, cp = 0.05))
summary(tree.bankTrain)
rpart.plot(tree.bankTrain)
printcp(tree.bankTrain)
predict.bankTest = predict(tree.bankTrain, bank.test, type="class")
acc = table(predict.bankTest, bank.test$pep)
print(paste0("Test Accuracy:", sum(diag(acc))/sum(acc)))
tree.bankTrain = rpart(pep~., data = bank.train, method = "class",
control = rpart.control(min.split = 1, xval = 10))
summary(tree.bankTrain)
rpart.plot(tree.bankTrain)
printcp(tree.bankTrain)
predict.bankTest = predict(tree.bankTrain, bank.test, type="class")
acc = table(predict.bankTest, bank.test$pep)
print(paste0("Test Accuracy:", sum(diag(acc))/sum(acc)))
tree.bankTrain = rpart(pep~., data = bank.train, method = "class",
control = rpart.control(min.split = 1, xval = 10, cp = 1))
summary(tree.bankTrain)
rpart.plot(tree.bankTrain)
printcp(tree.bankTrain)
predict.bankTest = predict(tree.bankTrain, bank.test, type="class")
acc = table(predict.bankTest, bank.test$pep)
print(paste0("Test Accuracy:", sum(diag(acc))/sum(acc)))
cp = seq(1,0,0.01)
cp
cp = 1:0:0.01
range(1,10)
c(1:10:0.1)
seq(1,10,.1)
cost = seq(1,0, 0.01)
cost = seq(1,0,0.01)
cost = seq(1,0,.1)
seq(1,0,.1)
cost = seq(1,0,-.1)
tree.bankTrain = rpart(pep~., data = bank.train, method = "class",
control = rpart.control(min.split = 1, xval = 10, cp = cost))
summary(tree.bankTrain)
control = trainControl(method = "cv", number = 10)
tree.bankTrain = train(pep~., data = bank.train, method = "rpart", trControl = control, tuneLength = 20)
print(tree.bankTrain)
cost = expand.grid(cp = seq(1,0,.01))
cost = expand.grid(cp = seq(1,0,-.01))
cost
control = trainControl(method = "cv", number = 10)
tree.bankTrain = train(pep~., data = bank.train, method = "rpart", trControl = control, tuneLength = 20, tunegrid = cost)
tree.bankTrain = train(pep~., data = bank.train, method = "rpart", trControl = control, tunegrid = cost)
tree.bankTrain = train(pep~., data = bank.train, method = "rpart", trControl = control)
tree.bankTrain = train(pep~., data = bank.train, method = "rpart", trControl = control, tuneGrid = cost)
print(tree.bankTrain)
tree.bankTrain$bestTune
tree.bankTrain = train(pep~., data = bank.train, method = "rpart", trControl = control)
print(tree.bankTrain)
cost = expand.grid(cp = seq(1,0,-.01))
control = trainControl(method = "cv", number = 10)
tree.bankTrain = train(pep~., data = bank.train, method = "rpart", trControl = control)
print(tree.bankTrain)
tree.bankTrain = train(pep~., data = bank.train, method = "rpart", trControl = control, tuneLength = 10)
print(tree.bankTrain)
tree.bankTrain = train(pep~., data = bank.train, method = "rpart", trControl = control, tuneLength = 100)
print(tree.bankTrain)
tree.bankTrain$
#Single tree
tree.bankTrain = rpart(pep~., data = bank.train, method = "class",
control = rpart.control(xval = 10))
summary(tree.bankTrain)
rpart.plot(tree.bankTrain)
rpart.plot(tree.bankTrain)
printcp(tree.bankTrain)
tree.bankTrain$
#Single tree
tree.bankTrain = rpart(pep~., data = bank.train, method = "class",
control = rpart.control(xval = 10))
summary(tree.bankTrain)
rpart.plot(tree.bankTrain)
?train
bank = read.csv("BankData.csv")
names(bank)
str(bank)
bank = data.frame(bank)
library(rpart)
library(rpart.plot)
tree.bank = rpart(pep ~.,data = bank, method = "class")
summary(tree.bank)
rpart.plot(tree.bank)
printcp(tree.bank)
tree.bank = rpart(pep ~.,data = bank, method = "class", rpart.control(cp = 0.01:0.1))
tree.bank = rpart(pep ~.,data = bank, method = "class", rpart.control(cp = 0:1))
?rpart
ggplot(bank, aes(y = pep, x = sex)) + geom_point() + xlab("Age") + ylab("Loan Offered") +
ggtitle("Relationship between Age and Loan Offered")
ggplot(bank, aes(y = pep, x = sex)) + geom_bar() + xlab("Age") + ylab("Loan Offered") +
ggtitle("Relationship between Age and Loan Offered")
ggplot(bank, aes(y = pep, x = sex)) + geom_hex() + xlab("Age") + ylab("Loan Offered") +
ggtitle("Relationship between Age and Loan Offered")
ggplot(bank, aes(y = pep, x = sex)) + geom_hist() + xlab("Age") + ylab("Loan Offered") +
ggtitle("Relationship between Age and Loan Offered")
ggplot(bank, aes(y = pep, x = sex)) + geom_histogram() + xlab("Age") + ylab("Loan Offered") +
ggtitle("Relationship between Age and Loan Offered")
ggplot(bank, aex(x = pep)) +geom_bar(aes(fill = sex))
ggplot(bank, aes(x = pep)) +geom_bar(aes(fill = sex))
ggplot(bank, aes(x = sex)) +geom_bar(aes(fill = pep))
setwd("~/projects/r_projects/artr")
a = vector(c(1,2), mode = character)
a = vector(len =2,  mode = character)
a = vector(len = 2)
a = c(1,2,3)
a = vector(len = 2)
a = vector(len = 2, mode = character)
a = vector(len = 2, mode = 'character')
a
a = vector(len = 2, mode = 'numeric')
a
a = vector(len = 2, mode = 'integer')
a
a[2]= 990
a
a[3] = 55
a
typeof(a)
typeof(a)
a = c(1,2)
b = c(99,88)
c = cbind(a,b)
c
d = rbind(a,b)
d
u = matrix(c(1,2,3,4), nrow = 1)
u
u = matrix(c(1,2,3,4), nrow = 2)
u
u = matrix(c(1,2,3,4), nrow = 3)
v
v = matrix(eye(2))
v
v = matrix(c(1,1,1,1),nrow = 2)
v
u + v
u + v
u = matrix(c(1,2,3,4), nrow = 2)
u
v = matrix(c(1,1,1,1),nrow = 2)
v
u + v
u + c(1,2,3,4)
u
u + c(1,2,3,4)
v = matrix(c(5,6,7,8),nrow = 2)
v
k
a = c(1,1)
k = rbind(a,a,a)
k
u
a = c(1,2)
u = rbind(a,a,a)
u
k
u + k
u
u = c(1,5)
u = rbind(a,a,a)
u + c(1,5)
a = matrix(c(11,22,33,44))
a
typeof(a)
?typeof
mode(a)
a = matrix(c(1,2,3,4), nrow = 2)
b = matrix(c(2,2,2,2), nrow = 2)
a + b
a*2
a*b
a%*%b
a^3
a/b
a//b
a%b
a%%b
a >b
up = function(a)
k = up(5)
k
k = up(5)
up = function(a)
return(a*a)
k = up(5)
k
k = up([1,2])
k = up(c(1,2))
k
b = matrix(c(1,2,3,4), nrow = 2)
k = up(b)
k
cup = function(a,b){
c = (a+b)^2
return(c)
}
k = cup(1,5)
k
k = cup(c(1,2),c(2,1))
k
k = cup(a,b)
k
k = cup(a,a)
k
(a+b)
(a+b)^2
a+a
b
a = matrix(c(1,2,3,4), nrow = 2)
b = matrix(c(2,2,2,2), nrow = 2)
cup = function(a,b){
c = (a+b)^2
return(c)
}
k = cup(a,a)
k
k = cup(a,b)
k
x[x>5]
x = c(5,25,3,-34,33, 89, 7, 1, 90, 66)
x[x>5]
x[x*x>25]
x[(x*x)>25]
x*x > 25
x
x
x*x > 25
-34 >25
x = c(5,25,3,-34,33, 89, 7, 1, 90, 66)
x[x>5]
x[x>25]
x[x*x > 25]
which(x>25)
x[which(x>25)]
x
x[x*x > 25 ]= -1
x
x = c(5,25,3,-34,33, 89, 7, 1, 90, 66)
x.subset(x>25)
subset(x>25)
?subset
subset(x,25)
subset(x,x>25)
x2 = c(5,25,3,-34,33, 89, 7, 1, 90, 66,NA)
subset(x2,x2>25)
x2[x2>25]
x2[length(x2)]
sequence(1,50)
sequence(1:50)
sequence(1,50,2)
?sequence
sequence(1:2)
sequence(1:6:2)
sequence(1:6)
sequence(6)
sequence(c(1,4))
seq(1:10)
seq(1:10:2)
seq(1,10)
seq(1,10,2)
seq(1,10,length = 4)
seq(1,10,length = 3)
rep(c(1,2), 30)
rep(c(1,2), each = 5)
sapply(x, func(x) return(x*x))
sapply(5, func(x) return(x*x))
z = matrix(c(1,4,2,5,3,6), nrow = 3, byrow = T)
z
apply(z,2, mean) #mean along columns
apply(z,1, mean)
f = function(x) x/c(2,8)
apply(z,1,f) # This has to be applied by rows because each row has 2 elements
apply(z,2,f)
z
x <- list(a = 1, b = 1:3, c = 10:100)
x
sapply(1:5,function(x) rnorm(3,x))
rnorm(3,1)
setwd("~/projects/r_projects/uw450/HW3")
cart = read.csv("Sessions.csv", stringsAsFactors = FALSE)
dim(cart)
str(cart)
head(cart)
km.cart = kmeans(cart,2,nstart = 20)
km.cart = kmeans(cart,2,nstart = 20)
plot(cart, col = (km.cart$cluster + 1), pch = 20, cex = 2)
set.seed(2)
x = matrix(rnorm(50*2), ncol = 2)
x[1:25,1] = x[1:25,1] + 3
x[1:25,2] = x[1:25,2] -4
km.out = kmeans(x, 2, nstart = 20)
plot(x,col = (km.out$cluter+1), pch = 20, cex = 2)
plot(x,col = (km.out$cluster+1), pch = 20, cex = 2)
km.cart = kmeans(cart,4,nstart = 20)
km.cart = kmeans(cart,4,nstart = 20)
km.cart
plot(cart[c("Home","Means")], col = km.cart$cluster)
plot(cart[c("Home","Products")], col = km.cart$cluster)
points(km.cart$centers[,c("Home","Products")], col = 1:3, pch  = 20, cex = 3)
points(km.cart$centers[,c("Home","Products")], col = 1:2, pch  = 20, cex = 3)
points(km.cart$centers[,c("Home","Products")], col = 1:2, pch  = 23, cex = 3)
points(km.cart$centers[,c("Home","Products")], col = 1:3, pch  = 23, cex = 3)
points(km.cart$centers[,c("Home","Products")], col = 1:4, pch  = 23, cex = 3)
km.cart = kmeans(cart,4,nstart = 20)
km.cart
plot(cart[c("Home","Products")], col = km.cart$cluster)
points(km.cart$centers[,c("Home","Products")], col = 1:4, pch  = 23, cex = 3)
plot(cart[c("Home","Products","Search")], col = km.cart$cluster)
points(km.cart$centers[,c("Home","Products")], col = 1:4, pch  = 23, cex = 3)
points(km.cart$centers[,c("Home","Products","Search")], col = 1:4, pch  = 23, cex = 3)
plot(cart[c("Home","Products","Search")], col = km.cart$cluster)
points(km.cart$centers[,c("Home","Products","Search")], col = 1:4, pch  = 23, cex = 3)
km.cart = kmeans(cart,4,nstart = 20)
km.cart = kmeans(cart,4,nstart = 20)
km.cart
cart
cart[,cart$Prod_B=1]
cart[,cart$Prod_B==1]
cart[,Prod_B==1]
cart[,Prod_B=1]
cart[,cart$Prod_B=1]
cart[cart$Prod_B=1]
cart[cart$Prod_B==1]
cart$Prod_B = 1
cart = read.csv("Sessions.csv", stringsAsFactors = FALSE)
cart$Prod_B == 1
cart[cart$Prod_B==1]
head(cart)
cart[,cart$Prod_B==1]
head(cart)
cart[cart$Prod_B==1,]
cart[cart$Prod_B==1,cart$Search ==1,]
cart[cart$Prod_B==1 & cart$Search ==1,]
cart[cart$Prod_B==1 & cart$Search ==1 & cart$Home == 1, ]
?kmeans
cart[cart$Prod_B==1 & cart$Search ==1 & cart$Home == 1, ]
cart.out = cbind(cart, km.out$cluster])
cart.out = cbind(cart, km.out$cluster)
cart.out[cart$Prod_B==1 & cart$Search ==1 & cart$Home == 1, ]
cart.out[cart$Prod_B==1 & cart$Search ==1 & cart$Home == 1 & cart$Purchase = 0, ]
cart.out[cart$Prod_B==1 & cart$Search ==1 & cart$Home == 1 & cart$Purchase == 0, ]
cart.out[cart$Prod_B==1 & cart$Search ==1 & cart$Home == 1 & cart$Purchase == 0, cart$cart == 0, ]
cart.out[cart$Prod_B==1 & cart$Search ==1 & cart$Home == 1 & cart$Purchase == 0, cart$Cart == 0, ]
cart.out[cart$Prod_B==1 & cart$Search ==1 & cart$Home == 1 & cart$Purchase == 0 & cart$Cart == 0, ]
cart.out[cart$Prod_B==1 & cart$Search ==1 & cart$Home == 1 & cart$Purchase == 0 & cart$Cart == 0 & Prod_A = 0, ]
cart.out[cart$Prod_B==1 & cart$Search ==1 & cart$Home == 1 & cart$Purchase == 0 & cart$Cart == 0 & cart$Prod_A = 0, ]
cart.out[cart$Prod_B==1 & cart$Search ==1 & cart$Home == 1 & cart$Purchase == 0 & cart$Cart == 0 & cart$Prod_A == 0, ]
cart.out[cart$Prod_B==1 & cart$Search ==1 & cart$Home == 1 & cart$Purchase == 0 & cart$Cart == 0 & cart$Prod_A == 0 & cart$Prod_C ==0, ]
cart.out[cart$Prod_B==0 & cart$Search ==0 & cart$Home == 0 & cart$Purchase == 0 & cart$Cart == 0 & cart$Prod_A == 0
& cart$Prod_C ==1 & cart$Products == 1, ]
cart.out[cart$Prod_B==0 & cart$Search ==0 & cart$Home == 0 & cart$Purchase == 0 & cart$Cart == 0 & cart$Prod_A == 0
& cart$Prod_C ==1 & cart$Products == 1, ]
cart.out[cart$Prod_B==0 & cart$Search ==0 & cart$Home == 1 & cart$Purchase == 0 & cart$Cart == 0 & cart$Prod_A == 0
& cart$Prod_C ==1 & cart$Products == 1, ]
cart.out[cart$Prod_B==0 & cart$Search ==0 & cart$Home == 1 & cart$Purchase == 0 & cart$Cart == 0 & cart$Prod_A == 0 & cart$Prod_C ==1 & cart$Products == 1, ]
cart.out[cart$Prod_C ==1 & cart$Products == 1, ]
cart.out[cart$Prod_C ==1 & cart$Products == 1 & cart$Home == 0, ]
cart[cart$Cart = 0 & cart$Purchase = 1, ]
cart[cart$Cart == 0 & cart$Purchase == 1, ]
cart[cart$Cart == 1 & cart$Purchase == 0, ]
km.out = kmeans(x, 4, nstart = 20)
km.out
cart.out = cbind(cart, km.out$cluster)
cart.out[cart$Prod_B==1 & cart$Search ==1 & cart$Home == 1 & cart$Purchase == 0 & cart$Cart == 0 & cart$Prod_A == 0 & cart$Prod_C ==0, ]
cart.out[cart$Prod_B==1 & cart$Search ==1 & cart$Home == 1,]
sum(cart$Prod_A)/sum(cart$Home)
sum(cart$Prod_B)/sum(cart$Home)
sum(cart$Prod_B)
temp.cart = cart.out[cart$Prod_B==1 & cart$Search ==1 & cart$Home == 1,]
sum(temp.cart$Prod_A)/sum(temp.cart$Home)
sum(temp.cart$Prod_B)/sum(temp.cart$Home)
sum(temp.cart$Prod_C)/sum(temp.cart$Home)
temp.cart
summary(km.out$cluster)
histogram(km.out$cluster)
for(i in 4:8){
km.out = kmeans(x, 4, nstart = 20)
km.out
}
for(i in 4:8){
km.out = kmeans(i, 4, nstart = 20)
km.out
}
for(i in 4:8){
km.out = kmeans(x, i, nstart = 20)
km.out
}
for(i in 4:8){
km.out = kmeans(x, i, nstart = 20)
print(km.out)
}
km.out$withinss
km.out = kmeans(x, 4, nstart = 20)
km.out
km.out$totss
km.out$tot.withinss
km.out$withinss
km.out$betweenss
km.out$betweenss/km.out$tot.withinss
km.out$betweenss/km.out$totss
km.out
km.out$ifault
install.packages("NbClust")
library("NbCLust")
library("NbClust")
cart = read.csv("Sessions.csv", stringsAsFactors = FALSE)
dim(cart)
str(cart)
head(cart)
res.nb = NbClust(cart, distance = "euclidean", min.nc = 4, max.nc = 10, method = "complete" , index = "gap")
res.nb
?NbClust
res.nb$Best.partition
res.nb$Best.nc
res.nb = NbClust(cart, distance = "euclidean", min.nc = 4, max.nc = 10, method = "complete" , index = "all")
?kmeans
